# -*- coding: utf-8 -*-
"""Untitled0 (5).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18AF3sU1wXWTppAYeREci7DY6PJ8SsNWq
"""

print('hello world')

import tensorflow as tf
import cv2 as cv
import matplotlib.pyplot as plt



mnist = tf.keras.datasets.mnist.load_data()

"""# New Section"""

(X_train, Y_train),(X_test, Y_test)  = tf.keras.datasets.mnist.load_data()
X_train.shape

plt.imshow(X_train[5])
plt.show()
print(X_train[5])

plt.imshow(X_train[5],cmap=plt.cm.binary)

x_train = tf.keras.utils.normalize(X_train, axis=1)
x_test = tf.keras.utils.normalize(X_test, axis=1)
plt.imshow(x_train[5],cmap=plt.cm.binary)

print(x_train[5])

img =  x_train[3]
fig, ax = plt.subplots(1,2,figsize=(8,3))
print('Label is ', Y_train[3])
ax[0].imshow(img)
ax[1].imshow(img,cmap=plt.cm.binary)

import numpy as np
IMG_SIZE = 28
x_train_set = np.array(x_train).reshape(-1,IMG_SIZE,IMG_SIZE,1)
x_test_set = np.array(x_test).reshape(-1,IMG_SIZE, IMG_SIZE,1)

print('Training set dimension',x_train_set.shape)
print('Test set dimension', x_test_set.shape)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Flatten,Conv2D,MaxPooling2D

model = Sequential()

model.add(Conv2D(64,(3,3),input_shape = x_train_set.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(3,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))

model.add(Dense(32))
model.add(Activation('relu'))

model.add(Dense(10))
model.add(Activation('softmax'))

model.summary()

model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit(x_train_set,Y_train,epochs=5,validation_split=0.3)

prediction = model.predict([x_test_set])

print(np.argmax(prediction[12]))
plt.imshow(x_test[12])

import cv2 as cv

img = cv.imread('sample.PNG')
plt.imshow(img)

img.shape

img_gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
img_gray.shape

img_gray_resiz = cv.resize(img_gray,(28,28),interpolation = cv.INTER_AREA)
img_gray_resiz.shape
plt.imshow(img_gray_resiz )

img_fit = tf.keras.utils.normalize(img_gray_resiz,axis=1)

img_mat = np.array(img_fit).reshape(-1,28,28,1)
img_mat.shape

sample_img_matrix = model.predict(img_mat)

print(np.argmax(sample_img_matrix))
plt.imshow(img_gray_resiz)